services:
  postgres-client:
    image: postgres:16
    container_name: postgres-client-db
    environment:
      POSTGRES_DB: client_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres-client-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-account:
    image: postgres:16
    container_name: postgres-account-db
    environment:
      POSTGRES_DB: account_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres-account-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-credit:
    image: postgres:16
    container_name: postgres-credit-db
    environment:
      POSTGRES_DB: credit_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    volumes:
      - postgres-credit-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
      - "9093:9093"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 40s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"

  client-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        JAR_FILE: client_processing/target/client_processing-*.jar
    container_name: client-service
    ports:
      - "8081:8080"
    environment:
      - SERVER_PORT=8080
      - DB_HOST=postgres-client
      - DB_PORT=5432
      - DB_NAME=client_db
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      postgres-client:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped

  account-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        JAR_FILE: account_processing/target/account_processing-*.jar
    container_name: account-service
    ports:
      - "8082:8080"
    environment:
      - SERVER_PORT=8080
      - DB_HOST=postgres-account
      - DB_PORT=5432
      - DB_NAME=account_db
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      postgres-account:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped

  credit-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        JAR_FILE: credit_processing/target/credit_processing-*.jar
    container_name: credit-service
    ports:
      - "8083:8080"
    environment:
      - SERVER_PORT=8080
      - DB_HOST=postgres-credit
      - DB_PORT=5432
      - DB_NAME=credit_db
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - CLIENT_SERVICE_URL=http://client-service:8080
      - CREDIT_LIMIT=1000000
      - MAX_DELAYS_ALLOWED=0
    depends_on:
      postgres-credit:
        condition: service_healthy
      kafka:
        condition: service_healthy
      client-service:
        condition: service_started
    restart: unless-stopped

volumes:
  postgres-client-data:
  postgres-account-data:
  postgres-credit-data: